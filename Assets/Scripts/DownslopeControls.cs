//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Wozware.Downslope
{
    public partial class @DownslopeControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DownslopeControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Global"",
            ""id"": ""2b18a6fd-5e6b-4629-95f2-c8fa930c3dd8"",
            ""actions"": [
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""Value"",
                    ""id"": ""466695eb-128d-4d1d-8e38-ae4d76145f26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5269dcad-c0bf-454a-9295-c644c48a4c08"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Game"",
            ""id"": ""e29e4d49-4094-4d75-bb88-a14d955fd977"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""5b17afcd-18ec-4145-8888-6f542f509b91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""d3492468-7cf1-454e-8347-2dd5b9b1ff4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""0a7d3d7b-8b77-4b62-bb24-7a77315184f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb35ab8c-82ec-4b2f-8060-11ca145ff642"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a94e0bb1-4849-49e3-951f-8bb911c89385"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5fe1ae4d-7f6d-433c-b7e5-64128518b197"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""9419c21b-4056-4aa4-b461-a1d168a7504f"",
            ""actions"": [
                {
                    ""name"": ""CarveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""9fb0286b-4f45-4c18-b8c5-600175a0567a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CarveRight"",
                    ""type"": ""Button"",
                    ""id"": ""8db376ca-976c-44c1-bd08-7b54e379a446"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""358d6263-690f-4b42-9f0b-68509c6a6d33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SendIt"",
                    ""type"": ""Button"",
                    ""id"": ""a78e780d-41d9-4ba8-8440-86dffe658a36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7ef5ab45-ae7e-43c1-a169-9a4ed4cd11eb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce39d91e-a6aa-4b66-bb78-a7b0052490b9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CarveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd80be93-c2cf-4511-b344-8dc808ce792d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CarveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c121988-2c1d-4101-86d5-7084a09894d9"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SendIt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LevelCreator"",
            ""id"": ""a1c5f36f-a40e-427a-a099-3d80afca822e"",
            ""actions"": [
                {
                    ""name"": ""ControlMode"",
                    ""type"": ""Button"",
                    ""id"": ""b1c6c8fc-09e1-4eac-9e43-48e5db2a0c08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Place"",
                    ""type"": ""Button"",
                    ""id"": ""0488a798-190a-4f4f-8701-4fd3999a47a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""30663115-4f60-4406-87a5-57f135d8a97e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShiftMode"",
                    ""type"": ""Button"",
                    ""id"": ""be730959-56b6-4f61-b176-c5fbe895d0b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f4bddf93-33bb-45ec-aea6-c2e4307b915a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""43da892b-9d24-4592-b6ec-91776ca61e88"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4d7f8f4f-7aa6-4bd4-994e-b661f4a8c64f"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2e342025-57e1-481f-80f5-99012d720bd7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8bd017b6-cad8-4a7e-8b21-7af5bca493ce"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c71b4be7-b84a-47f9-8ea6-88d0face5265"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""430f34d9-d8c4-4fb0-b748-fb4a55235cff"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Place"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a7f18a1-d01e-46e8-b136-2c750c270a8c"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ControlMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""311a4655-59f5-4218-b49d-3d2a1e556594"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ShiftMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Global
            m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
            m_Global_CursorPosition = m_Global.FindAction("CursorPosition", throwIfNotFound: true);
            // Game
            m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
            m_Game_Escape = m_Game.FindAction("Escape", throwIfNotFound: true);
            m_Game_Enter = m_Game.FindAction("Enter", throwIfNotFound: true);
            m_Game_Select = m_Game.FindAction("Select", throwIfNotFound: true);
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_CarveLeft = m_Player.FindAction("CarveLeft", throwIfNotFound: true);
            m_Player_CarveRight = m_Player.FindAction("CarveRight", throwIfNotFound: true);
            m_Player_Brake = m_Player.FindAction("Brake", throwIfNotFound: true);
            m_Player_SendIt = m_Player.FindAction("SendIt", throwIfNotFound: true);
            // LevelCreator
            m_LevelCreator = asset.FindActionMap("LevelCreator", throwIfNotFound: true);
            m_LevelCreator_ControlMode = m_LevelCreator.FindAction("ControlMode", throwIfNotFound: true);
            m_LevelCreator_Place = m_LevelCreator.FindAction("Place", throwIfNotFound: true);
            m_LevelCreator_Scroll = m_LevelCreator.FindAction("Scroll", throwIfNotFound: true);
            m_LevelCreator_ShiftMode = m_LevelCreator.FindAction("ShiftMode", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Global
        private readonly InputActionMap m_Global;
        private List<IGlobalActions> m_GlobalActionsCallbackInterfaces = new List<IGlobalActions>();
        private readonly InputAction m_Global_CursorPosition;
        public struct GlobalActions
        {
            private @DownslopeControls m_Wrapper;
            public GlobalActions(@DownslopeControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @CursorPosition => m_Wrapper.m_Global_CursorPosition;
            public InputActionMap Get() { return m_Wrapper.m_Global; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
            public void AddCallbacks(IGlobalActions instance)
            {
                if (instance == null || m_Wrapper.m_GlobalActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GlobalActionsCallbackInterfaces.Add(instance);
                @CursorPosition.started += instance.OnCursorPosition;
                @CursorPosition.performed += instance.OnCursorPosition;
                @CursorPosition.canceled += instance.OnCursorPosition;
            }

            private void UnregisterCallbacks(IGlobalActions instance)
            {
                @CursorPosition.started -= instance.OnCursorPosition;
                @CursorPosition.performed -= instance.OnCursorPosition;
                @CursorPosition.canceled -= instance.OnCursorPosition;
            }

            public void RemoveCallbacks(IGlobalActions instance)
            {
                if (m_Wrapper.m_GlobalActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGlobalActions instance)
            {
                foreach (var item in m_Wrapper.m_GlobalActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GlobalActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GlobalActions @Global => new GlobalActions(this);

        // Game
        private readonly InputActionMap m_Game;
        private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
        private readonly InputAction m_Game_Escape;
        private readonly InputAction m_Game_Enter;
        private readonly InputAction m_Game_Select;
        public struct GameActions
        {
            private @DownslopeControls m_Wrapper;
            public GameActions(@DownslopeControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Escape => m_Wrapper.m_Game_Escape;
            public InputAction @Enter => m_Wrapper.m_Game_Enter;
            public InputAction @Select => m_Wrapper.m_Game_Select;
            public InputActionMap Get() { return m_Wrapper.m_Game; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
            public void AddCallbacks(IGameActions instance)
            {
                if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
            }

            private void UnregisterCallbacks(IGameActions instance)
            {
                @Escape.started -= instance.OnEscape;
                @Escape.performed -= instance.OnEscape;
                @Escape.canceled -= instance.OnEscape;
                @Enter.started -= instance.OnEnter;
                @Enter.performed -= instance.OnEnter;
                @Enter.canceled -= instance.OnEnter;
                @Select.started -= instance.OnSelect;
                @Select.performed -= instance.OnSelect;
                @Select.canceled -= instance.OnSelect;
            }

            public void RemoveCallbacks(IGameActions instance)
            {
                if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameActions instance)
            {
                foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameActions @Game => new GameActions(this);

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_CarveLeft;
        private readonly InputAction m_Player_CarveRight;
        private readonly InputAction m_Player_Brake;
        private readonly InputAction m_Player_SendIt;
        public struct PlayerActions
        {
            private @DownslopeControls m_Wrapper;
            public PlayerActions(@DownslopeControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @CarveLeft => m_Wrapper.m_Player_CarveLeft;
            public InputAction @CarveRight => m_Wrapper.m_Player_CarveRight;
            public InputAction @Brake => m_Wrapper.m_Player_Brake;
            public InputAction @SendIt => m_Wrapper.m_Player_SendIt;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @CarveLeft.started += instance.OnCarveLeft;
                @CarveLeft.performed += instance.OnCarveLeft;
                @CarveLeft.canceled += instance.OnCarveLeft;
                @CarveRight.started += instance.OnCarveRight;
                @CarveRight.performed += instance.OnCarveRight;
                @CarveRight.canceled += instance.OnCarveRight;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @SendIt.started += instance.OnSendIt;
                @SendIt.performed += instance.OnSendIt;
                @SendIt.canceled += instance.OnSendIt;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @CarveLeft.started -= instance.OnCarveLeft;
                @CarveLeft.performed -= instance.OnCarveLeft;
                @CarveLeft.canceled -= instance.OnCarveLeft;
                @CarveRight.started -= instance.OnCarveRight;
                @CarveRight.performed -= instance.OnCarveRight;
                @CarveRight.canceled -= instance.OnCarveRight;
                @Brake.started -= instance.OnBrake;
                @Brake.performed -= instance.OnBrake;
                @Brake.canceled -= instance.OnBrake;
                @SendIt.started -= instance.OnSendIt;
                @SendIt.performed -= instance.OnSendIt;
                @SendIt.canceled -= instance.OnSendIt;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // LevelCreator
        private readonly InputActionMap m_LevelCreator;
        private List<ILevelCreatorActions> m_LevelCreatorActionsCallbackInterfaces = new List<ILevelCreatorActions>();
        private readonly InputAction m_LevelCreator_ControlMode;
        private readonly InputAction m_LevelCreator_Place;
        private readonly InputAction m_LevelCreator_Scroll;
        private readonly InputAction m_LevelCreator_ShiftMode;
        public struct LevelCreatorActions
        {
            private @DownslopeControls m_Wrapper;
            public LevelCreatorActions(@DownslopeControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @ControlMode => m_Wrapper.m_LevelCreator_ControlMode;
            public InputAction @Place => m_Wrapper.m_LevelCreator_Place;
            public InputAction @Scroll => m_Wrapper.m_LevelCreator_Scroll;
            public InputAction @ShiftMode => m_Wrapper.m_LevelCreator_ShiftMode;
            public InputActionMap Get() { return m_Wrapper.m_LevelCreator; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LevelCreatorActions set) { return set.Get(); }
            public void AddCallbacks(ILevelCreatorActions instance)
            {
                if (instance == null || m_Wrapper.m_LevelCreatorActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_LevelCreatorActionsCallbackInterfaces.Add(instance);
                @ControlMode.started += instance.OnControlMode;
                @ControlMode.performed += instance.OnControlMode;
                @ControlMode.canceled += instance.OnControlMode;
                @Place.started += instance.OnPlace;
                @Place.performed += instance.OnPlace;
                @Place.canceled += instance.OnPlace;
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
                @ShiftMode.started += instance.OnShiftMode;
                @ShiftMode.performed += instance.OnShiftMode;
                @ShiftMode.canceled += instance.OnShiftMode;
            }

            private void UnregisterCallbacks(ILevelCreatorActions instance)
            {
                @ControlMode.started -= instance.OnControlMode;
                @ControlMode.performed -= instance.OnControlMode;
                @ControlMode.canceled -= instance.OnControlMode;
                @Place.started -= instance.OnPlace;
                @Place.performed -= instance.OnPlace;
                @Place.canceled -= instance.OnPlace;
                @Scroll.started -= instance.OnScroll;
                @Scroll.performed -= instance.OnScroll;
                @Scroll.canceled -= instance.OnScroll;
                @ShiftMode.started -= instance.OnShiftMode;
                @ShiftMode.performed -= instance.OnShiftMode;
                @ShiftMode.canceled -= instance.OnShiftMode;
            }

            public void RemoveCallbacks(ILevelCreatorActions instance)
            {
                if (m_Wrapper.m_LevelCreatorActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ILevelCreatorActions instance)
            {
                foreach (var item in m_Wrapper.m_LevelCreatorActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_LevelCreatorActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public LevelCreatorActions @LevelCreator => new LevelCreatorActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface IGlobalActions
        {
            void OnCursorPosition(InputAction.CallbackContext context);
        }
        public interface IGameActions
        {
            void OnEscape(InputAction.CallbackContext context);
            void OnEnter(InputAction.CallbackContext context);
            void OnSelect(InputAction.CallbackContext context);
        }
        public interface IPlayerActions
        {
            void OnCarveLeft(InputAction.CallbackContext context);
            void OnCarveRight(InputAction.CallbackContext context);
            void OnBrake(InputAction.CallbackContext context);
            void OnSendIt(InputAction.CallbackContext context);
        }
        public interface ILevelCreatorActions
        {
            void OnControlMode(InputAction.CallbackContext context);
            void OnPlace(InputAction.CallbackContext context);
            void OnScroll(InputAction.CallbackContext context);
            void OnShiftMode(InputAction.CallbackContext context);
        }
    }
}
